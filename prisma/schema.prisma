generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum TokenType {
  AUTHENTICATION_TOKEN
  PASSWORD_RESET_TOKEN
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  userVerified  Boolean?  @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
}

model VerificationRequest {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String    @unique
  tokenType  TokenType
  expires    DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([identifier, token])
}

model Clients {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  clientName    String
  officeAddress String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  proformaInvoice ProformaInvoice[]
}

model DocumentDetails {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  beneficiaryDetails String
  termsAndConditions String   @db.String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model ProformaInvoiceProducts {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  proformaInvoiceId String   @db.ObjectId
  productName       String
  quantity          Float
  unit              String
  unitPrice         Float
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  proformaInvoice ProformaInvoice @relation(fields: [proformaInvoiceId], references: [id])
}

model ProformaInvoice {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId                 String   @db.ObjectId
  invoiceNumber            String
  invoiceDate              DateTime
  currency                 String
  totalAmount              Float
  termsAndConditions       String   @db.String
  customTotalAmount        Boolean
  customTermsAndConditions Boolean
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  client                  Clients                   @relation(fields: [clientId], references: [id])
  proformaInvoiceProducts ProformaInvoiceProducts[]
}
